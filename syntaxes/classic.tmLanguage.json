{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "Classic",
	"patterns": [
		{
			"include": "#keywords"
		},
		{
			"include": "#values"
		},
		{
			"include": "#strings"
		},
		{
			"begin": "'",
			"beginCaptures": {
				"0": {
					"name": "comment.line.begin.classic"
				}
			},
			"end": "\\n|(?=\\?>)",
			"endCaptures": {	
				"0": {
					"name": "comment.line.end.classic"
				}
			},
			"name": "comment.line.classic"
		},
		{
			"begin": "(?i)\\b(comment)\\b",
			"beginCaptures": {
				"0": {
					"name": "comment.block.begin.classic"
				}
			},
			"end": "(?i)\\b(end comment)\\b",
			"endCaptures": {	
				"0": {
					"name": "comment.block.end.classic"
				}
			},
			"name": "comment.block.classic"
		}
	],
	"repository": {
		"keywords": {
			"patterns": [
				{
					"name": "keyword.control.classic",
					"match": "(?i)\\b(do|else|end|for|if|jump|return|unless|until|while)\\b"
				},
				{
					"name": "keyword.operator.comparison.classic",
					"match": "(?i)\\b(and|not|or|xor|compare|cmp)\\b"
				},
				{
					"name": "storage.type.classic",
					"match": "(?i)\\b(address|array|bool|byte|char|comparator|comparison|double|float|integer|int|long|medium|method|object|pointer|ptr|real|short|signed|string|subroutine|sub|tuple|unsigned|uns)\\b"
				},
				{
					"name": "storage.modifier.classic",
					"match": "(?i)\\b(data|operator|var)\\b"
				},
				{
					"name": "keyword.other.classic",
					"match": "(?i)\\b(assert|calc|call|convention|import|in|include|includable|module|routine|set)\\b"
				},
				{
					"name": "keyword.operator.other.classic",
					"match": "\\$|=>|\\->"
				},
				{
					"match": "(\\.)([0-9]+)",
					"captures": {
						"1": {
							"name": "keyword.operator.other.classic"
						},
						"2": {
							"name": "constant.numeric.classic"
						}
					}
				},
				{
					"name": "keyword.operator.reference.classic",
					"match": "\\@|\\#"
				},
				{
					"name": "keyword.operator.bitwise.classic",
					"match": "\\~|<<|>>|\\^<|>\\^|\\&|\\||\\^"
				},
				{
					"name": "keyword.operator.comparison.classic",
					"match": "!|==|>|<|!=|!<|!>|<>|>=|<=|!<>|!>=|!<=|<>=|!<>="
				},
				{
					"name": "keyword.operator.arithmetic.classic",
					"match": "\\-|\\+|\\*|\\/|%|\\*\\*"
				},
				{
					"name": "keyword.operator.assignment.classic",
					"match": "="
				}
			]
		},
		"values": {
			"patterns": [
				{
					"name": "constant.language.classic",
					"match": "(?i)\\b(null|true|false)\\b"
				},
				{
					"name": "constant.numeric.classic",
					"match": "(?x)(?<!\\w|\\$)[+-]?(?:((0|[1-9][0-9]*)(\\.[0-9]*)?| \\.[0-9]+))(?!\\w)"
				},
				{
					"name": "variable.other.constant.classic",
					"match": "(?i)data(?=\\=)\\s+?(\\S*)"
				},
				{
					"match": "(\\w*) *([\\(\\[{])",
					"captures": {
						"1": {
							"name": "entity.name.function.classic"
						},
						"2": {
							"name": "meta.brace.begin.classic"
						}
					}
				}
			]
		},
		"strings": {
			"name": "string.quoted.double.classic",
			"begin": "\"",
			"end": "\"",
			"patterns": [
				{
					"name": "constant.character.escape.classic",
					"match": "\\\\."
				}
			]
		}
	},
	"scopeName": "source.classic"
}